var searchIndex = {};
searchIndex['serde_json'] = {"items":[[0,"","serde_json","JSON and serialization",null,null],[0,"builder","","JSON Builders",null,null],[3,"ArrayBuilder","serde_json::builder","This structure provides a simple interface for constructing a JSON array.",null,null],[3,"ObjectBuilder","","This structure provides a simple interface for constructing a JSON object.",null,null],[11,"new","","Construct an `ObjectBuilder`.",0,{"inputs":[{"name":"arraybuilder"}],"output":{"name":"arraybuilder"}}],[11,"unwrap","","Return the constructed `Value`.",0,{"inputs":[{"name":"arraybuilder"}],"output":{"name":"value"}}],[11,"push","","Insert a value into the array.",0,{"inputs":[{"name":"arraybuilder"},{"name":"t"}],"output":{"name":"arraybuilder"}}],[11,"push_array","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting array into\nthis array.",0,{"inputs":[{"name":"arraybuilder"},{"name":"f"}],"output":{"name":"arraybuilder"}}],[11,"push_object","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting object into\nthis array.",0,{"inputs":[{"name":"arraybuilder"},{"name":"f"}],"output":{"name":"arraybuilder"}}],[11,"new","","Construct an `ObjectBuilder`.",1,{"inputs":[{"name":"objectbuilder"}],"output":{"name":"objectbuilder"}}],[11,"unwrap","","Return the constructed `Value`.",1,{"inputs":[{"name":"objectbuilder"}],"output":{"name":"value"}}],[11,"insert","","Insert a key-value pair into the object.",1,{"inputs":[{"name":"objectbuilder"},{"name":"s"},{"name":"v"}],"output":{"name":"objectbuilder"}}],[11,"insert_array","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting array into\nthis object.",1,{"inputs":[{"name":"objectbuilder"},{"name":"s"},{"name":"f"}],"output":{"name":"objectbuilder"}}],[11,"insert_object","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting object into\nthis object.",1,{"inputs":[{"name":"objectbuilder"},{"name":"s"},{"name":"f"}],"output":{"name":"objectbuilder"}}],[0,"de","serde_json","JSON Deserialization",null,null],[3,"Deserializer","serde_json::de","A structure that deserializes JSON into Rust values.",null,null],[5,"from_iter","","Decodes a json value from an iterator over an iterator\n`Iterator<Item=io::Result<u8>>`.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Decodes a json value from a `std::io::Read`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Decodes a json value from a byte slice `&[u8]`.",null,null],[5,"from_str","","Decodes a json value from a `&str`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates the JSON parser from an `std::iter::Iterator`.",2,{"inputs":[{"name":"deserializer"},{"name":"iter"}],"output":{"name":"deserializer"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.\nThis allows the `Deserializer` to validate that the input stream is at the end or that it\nonly has trailing whitespace.",2,{"inputs":[{"name":"deserializer"}],"output":{"name":"result"}}],[11,"visit","","",2,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_option","","Parses a `null` as a None, and any other values as a `Some(...)`.",2,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","Parses a newtype struct as the underlying value.",2,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","Parses an enum as an object like `{\"$KEY\":$VALUE}`, where $VALUE is either a straight\nvalue, a `[..]`, or a `{..}`.",2,null],[11,"format","","",2,{"inputs":[{"name":"deserializer"}],"output":{"name":"str"}}],[11,"visit_variant","","",2,{"inputs":[{"name":"deserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",2,{"inputs":[{"name":"deserializer"}],"output":{"name":"result"}}],[11,"visit_newtype","","",2,{"inputs":[{"name":"deserializer"}],"output":{"name":"result"}}],[11,"visit_tuple","","",2,{"inputs":[{"name":"deserializer"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",2,null],[0,"error","serde_json","JSON Errors",null,null],[4,"ErrorCode","serde_json::error","The errors that can arise while parsing a JSON stream.",null,null],[13,"EOFWhileParsingList","","EOF while parsing a list.",3,null],[13,"EOFWhileParsingObject","","EOF while parsing an object.",3,null],[13,"EOFWhileParsingString","","EOF while parsing a string.",3,null],[13,"EOFWhileParsingValue","","EOF while parsing a JSON value.",3,null],[13,"ExpectedColon","","Expected this character to be a `':'`.",3,null],[13,"ExpectedListCommaOrEnd","","Expected this character to be either a `','` or a `]`.",3,null],[13,"ExpectedObjectCommaOrEnd","","Expected this character to be either a `','` or a `}`.",3,null],[13,"ExpectedSomeIdent","","Expected to parse either a `true`, `false`, or a `null`.",3,null],[13,"ExpectedSomeValue","","Expected this character to start a JSON value.",3,null],[13,"InvalidEscape","","Invalid hex escape code.",3,null],[13,"InvalidNumber","","Invalid number.",3,null],[13,"InvalidUnicodeCodePoint","","Invalid unicode code point.",3,null],[13,"KeyMustBeAString","","Object key is not a string.",3,null],[13,"LoneLeadingSurrogateInHexEscape","","Lone leading surrogate in hex escape.",3,null],[13,"UnknownField","","Unknown field in struct.",3,null],[13,"MissingField","","Struct is missing a field.",3,null],[13,"TrailingCharacters","","JSON has non-whitespace trailing characters after the value.",3,null],[13,"UnexpectedEndOfHexEscape","","Unexpected end of hex excape.",3,null],[4,"Error","","This type represents all possible errors that can occur when serializing or deserializing a\nvalue into JSON.",null,null],[13,"SyntaxError","","The JSON value had some syntatic error.",4,null],[13,"IoError","","Some IO error occurred when serializing or deserializing a value.",4,null],[13,"FromUtf8Error","","Some UTF8 error occurred while serializing or deserializing a value.",4,null],[6,"Result","","Helper alias for `Result` objects that return a JSON `Error`.",null,null],[11,"eq","","",3,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",3,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",4,{"inputs":[{"name":"error"},{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",4,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"syntax","","",4,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"error"}}],[11,"end_of_stream","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"unknown_field","","",4,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"error"}}],[11,"missing_field","","",4,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"error"}}],[0,"ser","serde_json","JSON Serialization",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[5,"escape_bytes","","Serializes and escapes a `&[u8]` into a JSON string.",null,null],[5,"escape_str","","Serializes and escapes a `&str` into a JSON string.",null,{"inputs":[{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[5,"to_writer","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to\noptionally pretty print the JSON output.",null,null],[10,"open","","Called when serializing a '{' or '['.",5,{"inputs":[{"name":"formatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[10,"comma","","Called when serializing a ','.",5,{"inputs":[{"name":"formatter"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[10,"colon","","Called when serializing a ':'.",5,{"inputs":[{"name":"formatter"},{"name":"w"}],"output":{"name":"result"}}],[10,"close","","Called when serializing a '}' or ']'.",5,{"inputs":[{"name":"formatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"new","","Creates a new JSON serializer.",6,{"inputs":[{"name":"serializer"},{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",6,{"inputs":[{"name":"serializer"},{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer\nspecified.",6,{"inputs":[{"name":"serializer"},{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",6,{"inputs":[{"name":"serializer"}],"output":{"name":"w"}}],[11,"visit_bool","","",6,{"inputs":[{"name":"serializer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_isize","","",6,{"inputs":[{"name":"serializer"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","",6,{"inputs":[{"name":"serializer"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","",6,{"inputs":[{"name":"serializer"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","",6,{"inputs":[{"name":"serializer"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","",6,{"inputs":[{"name":"serializer"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","",6,{"inputs":[{"name":"serializer"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","",6,{"inputs":[{"name":"serializer"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","",6,{"inputs":[{"name":"serializer"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","",6,{"inputs":[{"name":"serializer"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","",6,{"inputs":[{"name":"serializer"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","",6,{"inputs":[{"name":"serializer"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","",6,{"inputs":[{"name":"serializer"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","",6,{"inputs":[{"name":"serializer"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","",6,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",6,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"visit_some","","",6,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_unit","","",6,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","Override `visit_newtype_struct` to serialize newtypes without an object wrapper.",6,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_unit_variant","","",6,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_newtype_variant","","",6,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_seq","","",6,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_tuple_variant","","",6,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_seq_elt","","",6,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_map","","",6,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct_variant","","",6,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map_elt","","",6,{"inputs":[{"name":"serializer"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"format","","",6,{"inputs":[{"name":"serializer"}],"output":{"name":"str"}}],[11,"open","","",7,{"inputs":[{"name":"compactformatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"comma","","",7,{"inputs":[{"name":"compactformatter"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"colon","","",7,{"inputs":[{"name":"compactformatter"},{"name":"w"}],"output":{"name":"result"}}],[11,"close","","",7,{"inputs":[{"name":"compactformatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",8,{"inputs":[{"name":"prettyformatter"}],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",8,null],[11,"open","","",8,{"inputs":[{"name":"prettyformatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"comma","","",8,{"inputs":[{"name":"prettyformatter"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"colon","","",8,{"inputs":[{"name":"prettyformatter"},{"name":"w"}],"output":{"name":"result"}}],[11,"close","","",8,{"inputs":[{"name":"prettyformatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[0,"value","serde_json","JSON Value",null,null],[3,"Serializer","serde_json::value","Create a `serde::Serializer` that serializes a `Serialize`e into a `Value`.",null,null],[3,"Deserializer","","Creates a `serde::Deserializer` from a `json::Value` object.",null,null],[4,"Value","","Represents a JSON value",null,null],[13,"Null","","Represents a JSON null value",9,null],[13,"Bool","","Represents a JSON Boolean",9,null],[13,"I64","","Represents a JSON signed integer",9,null],[13,"U64","","Represents a JSON unsigned integer",9,null],[13,"F64","","Represents a JSON floating point number",9,null],[13,"String","","Represents a JSON string",9,null],[13,"Array","","Represents a JSON array",9,null],[13,"Object","","Represents a JSON object",9,null],[5,"to_value","","Shortcut function to encode a `T` into a JSON `Value`",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"from_value","","Shortcut function to decode a JSON `Value` into a `T`",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"find","","If the `Value` is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",9,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Value Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the `Value` associated with the final key.",9,null],[11,"lookup","","Looks up a value by path.",9,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"search","","If the `Value` is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the `Value` is not an Object, returns None.",9,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated BTreeMap.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_string","","If the `Value` is a String, returns the associated str.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the `Value` is a Boolean, returns the associated bool.\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns ().\nReturns None otherwise.",9,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"serialize","","",9,{"inputs":[{"name":"value"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"value"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Serializes a json value into a string",9,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Serializer`.",10,{"inputs":[{"name":"serializer"}],"output":{"name":"serializer"}}],[11,"unwrap","","Unwrap the `Serializer` and return the `Value`.",10,{"inputs":[{"name":"serializer"}],"output":{"name":"value"}}],[11,"visit_bool","","",10,{"inputs":[{"name":"serializer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i64","","",10,{"inputs":[{"name":"serializer"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u64","","",10,{"inputs":[{"name":"serializer"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f64","","",10,{"inputs":[{"name":"serializer"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","",10,{"inputs":[{"name":"serializer"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","",10,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",10,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"visit_some","","",10,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_unit","","",10,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"visit_unit_variant","","",10,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_newtype_variant","","",10,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_seq","","",10,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_tuple_variant","","",10,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_seq_elt","","",10,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_map","","",10,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct_variant","","",10,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map_elt","","",10,{"inputs":[{"name":"serializer"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"format","","",10,{"inputs":[{"name":"serializer"}],"output":{"name":"str"}}],[11,"new","","Creates a new deserializer instance for deserializing the specified JSON value.",11,{"inputs":[{"name":"deserializer"},{"name":"value"}],"output":{"name":"deserializer"}}],[11,"visit","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_option","","",11,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","",11,null],[11,"visit_newtype_struct","","",11,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"format","","",11,{"inputs":[{"name":"deserializer"}],"output":{"name":"str"}}]],"paths":[[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"Deserializer"],[4,"ErrorCode"],[4,"Error"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[4,"Value"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex['serde'] = {"items":[[0,"","serde","Serde Serialization Framework",null,null],[0,"bytes","","Helper module to enable serializing bytes more efficiently",null,null],[3,"Bytes","serde::bytes","`Bytes` wraps a `&[u8]` in order to serialize into a byte array.",null,null],[3,"ByteBuf","","`ByteBuf` wraps a `Vec<u8>` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[11,"cmp","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"fmt","","",0,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,null],[11,"from","","",0,{"inputs":[{"name":"bytes"},{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",0,null],[11,"deref","","",0,null],[11,"serialize","","",0,{"inputs":[{"name":"bytes"},{"name":"s"}],"output":{"name":"result"}}],[11,"cmp","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytebuf"}}],[11,"new","","Construct a new, empty `ByteBuf`.",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",1,{"inputs":[{"name":"bytebuf"},{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"bytebuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"from","","",1,{"inputs":[{"name":"bytebuf"},{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"as_ref","","",1,null],[11,"as_mut","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"as_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"serialize","","",1,{"inputs":[{"name":"bytebuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit_unit","","",2,{"inputs":[{"name":"bytebufvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",2,{"inputs":[{"name":"bytebufvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","",2,null],[11,"visit_byte_buf","","",2,{"inputs":[{"name":"bytebufvisitor"},{"name":"vec"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"bytebuf"},{"name":"d"}],"output":{"name":"result"}}],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by\n`Error::kind_mismatch`.",null,null],[13,"Bool","","Represents a `bool` type.",3,null],[13,"Usize","","Represents a `usize` type.",3,null],[13,"U8","","Represents a `u8` type.",3,null],[13,"U16","","Represents a `u16` type.",3,null],[13,"U32","","Represents a `u32` type.",3,null],[13,"U64","","Represents a `u64` type.",3,null],[13,"Isize","","Represents a `isize` type.",3,null],[13,"I8","","Represents a `i8` type.",3,null],[13,"I16","","Represents a `i16` type.",3,null],[13,"I32","","Represents a `i32` type.",3,null],[13,"I64","","Represents a `i64` type.",3,null],[13,"F32","","Represents a `f32` type.",3,null],[13,"F64","","Represents a `f64` type.",3,null],[13,"Char","","Represents a `char` type.",3,null],[13,"Str","","Represents a `&str` type.",3,null],[13,"String","","Represents a `String` type.",3,null],[13,"Unit","","Represents a `()` type.",3,null],[13,"Option","","Represents an `Option<T>` type.",3,null],[13,"Seq","","Represents a sequence type.",3,null],[13,"Map","","Represents a map type.",3,null],[13,"UnitStruct","","Represents a unit struct type.",3,null],[13,"NewtypeStruct","","Represents a newtype type.",3,null],[13,"TupleStruct","","Represents a tuple struct type.",3,null],[13,"Struct","","Represents a struct type.",3,null],[13,"Tuple","","Represents a tuple type.",3,null],[13,"Enum","","Represents an `enum` type.",3,null],[13,"StructVariant","","Represents a struct variant.",3,null],[13,"TupleVariant","","Represents a tuple variant.",3,null],[13,"UnitVariant","","Represents a unit variant.",3,null],[13,"Bytes","","Represents a `&[u8]` type.",3,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PrimitiveVisitor","","A visitor that produces a primitive type.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[11,"visit_unit","","",4,{"inputs":[{"name":"unitvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",4,{"inputs":[{"name":"unitvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bool","","",5,{"inputs":[{"name":"boolvisitor"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_str","","",5,{"inputs":[{"name":"boolvisitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Construct a new `PrimitiveVisitor`.",6,{"inputs":[{"name":"primitivevisitor"}],"output":{"name":"self"}}],[11,"visit_isize","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize","collections::string","",7,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::option","",8,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",9,{"inputs":[{"name":"binaryheapvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",9,{"inputs":[{"name":"binaryheapvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",9,{"inputs":[{"name":"binaryheapvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::binary_heap","",10,{"inputs":[{"name":"binaryheap"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",11,{"inputs":[{"name":"btreesetvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",11,{"inputs":[{"name":"btreesetvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",11,{"inputs":[{"name":"btreesetvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::btree::set","",12,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",13,{"inputs":[{"name":"linkedlistvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",13,{"inputs":[{"name":"linkedlistvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",13,{"inputs":[{"name":"linkedlistvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::linked_list","",14,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",15,{"inputs":[{"name":"hashsetvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",15,{"inputs":[{"name":"hashsetvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",15,{"inputs":[{"name":"hashsetvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","std::collections::hash::set","",16,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",17,{"inputs":[{"name":"vecvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",17,{"inputs":[{"name":"vecvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",17,{"inputs":[{"name":"vecvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::vec","",18,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",19,{"inputs":[{"name":"vecdequevisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",19,{"inputs":[{"name":"vecdequevisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",19,{"inputs":[{"name":"vecdequevisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::vec_deque","",20,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `TupleVisitor*<T>`.",21,{"inputs":[{"name":"tuplevisitor1"}],"output":{"name":"self"}}],[11,"visit_seq","","",21,{"inputs":[{"name":"tuplevisitor1"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",22,{"inputs":[{"name":"tuplevisitor2"}],"output":{"name":"self"}}],[11,"visit_seq","","",22,{"inputs":[{"name":"tuplevisitor2"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",23,{"inputs":[{"name":"tuplevisitor3"}],"output":{"name":"self"}}],[11,"visit_seq","","",23,{"inputs":[{"name":"tuplevisitor3"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",24,{"inputs":[{"name":"tuplevisitor4"}],"output":{"name":"self"}}],[11,"visit_seq","","",24,{"inputs":[{"name":"tuplevisitor4"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",25,{"inputs":[{"name":"tuplevisitor5"}],"output":{"name":"self"}}],[11,"visit_seq","","",25,{"inputs":[{"name":"tuplevisitor5"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",26,{"inputs":[{"name":"tuplevisitor6"}],"output":{"name":"self"}}],[11,"visit_seq","","",26,{"inputs":[{"name":"tuplevisitor6"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",27,{"inputs":[{"name":"tuplevisitor7"}],"output":{"name":"self"}}],[11,"visit_seq","","",27,{"inputs":[{"name":"tuplevisitor7"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",28,{"inputs":[{"name":"tuplevisitor8"}],"output":{"name":"self"}}],[11,"visit_seq","","",28,{"inputs":[{"name":"tuplevisitor8"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",29,{"inputs":[{"name":"tuplevisitor9"}],"output":{"name":"self"}}],[11,"visit_seq","","",29,{"inputs":[{"name":"tuplevisitor9"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",30,{"inputs":[{"name":"tuplevisitor10"}],"output":{"name":"self"}}],[11,"visit_seq","","",30,{"inputs":[{"name":"tuplevisitor10"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",31,{"inputs":[{"name":"tuplevisitor11"}],"output":{"name":"self"}}],[11,"visit_seq","","",31,{"inputs":[{"name":"tuplevisitor11"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",32,{"inputs":[{"name":"tuplevisitor12"}],"output":{"name":"self"}}],[11,"visit_seq","","",32,{"inputs":[{"name":"tuplevisitor12"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `MapVisitor*<T>`.",33,{"inputs":[{"name":"btreemapvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",33,{"inputs":[{"name":"btreemapvisitor"}],"output":{"name":"result"}}],[11,"visit_map","","",33,{"inputs":[{"name":"btreemapvisitor"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","collections::btree::map","",34,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `MapVisitor*<T>`.",35,{"inputs":[{"name":"hashmapvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",35,{"inputs":[{"name":"hashmapvisitor"}],"output":{"name":"result"}}],[11,"visit_map","","",35,{"inputs":[{"name":"hashmapvisitor"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","std::collections::hash::map","",36,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::path","",37,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::boxed","",38,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::arc","",39,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::rc","",40,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","collections::borrow","",41,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::result","",42,{"inputs":[{"name":"result"},{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec<u8>`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"SyntaxError","","The value had some syntatic error.",43,null],[13,"EndOfStreamError","","EOF while deserializing a value.",43,null],[13,"UnknownFieldError","","Unknown field in struct.",43,null],[13,"MissingFieldError","","Struct is missing a field.",43,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",44,null],[10,"into_deserializer","","Convert this value into a deserializer.",44,{"inputs":[{"name":"valuedeserializer"}],"output":{"name":"deserializer"}}],[11,"eq","","",43,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"syntax","","",43,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[11,"end_of_stream","","",43,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"unknown_field","","",43,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",43,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[11,"visit","","",45,{"inputs":[{"name":"unitdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_option","","",45,{"inputs":[{"name":"unitdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",46,{"inputs":[{"name":"booldeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",47,{"inputs":[{"name":"i8deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",48,{"inputs":[{"name":"i16deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",49,{"inputs":[{"name":"i32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",50,{"inputs":[{"name":"i64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",51,{"inputs":[{"name":"isizedeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",52,{"inputs":[{"name":"u8deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",53,{"inputs":[{"name":"u16deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",54,{"inputs":[{"name":"u32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",55,{"inputs":[{"name":"u64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",56,{"inputs":[{"name":"usizedeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",57,{"inputs":[{"name":"f32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",58,{"inputs":[{"name":"f64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",59,{"inputs":[{"name":"chardeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",60,{"inputs":[{"name":"strdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","",60,null],[11,"visit_variant","","",60,{"inputs":[{"name":"strdeserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",60,{"inputs":[{"name":"strdeserializer"}],"output":{"name":"result"}}],[11,"into_deserializer","collections::string","",7,{"inputs":[{"name":"string"}],"output":{"name":"stringdeserializer"}}],[11,"visit","serde::de::value","",61,{"inputs":[{"name":"stringdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","",61,null],[11,"visit_variant","","",61,{"inputs":[{"name":"stringdeserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",61,{"inputs":[{"name":"stringdeserializer"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I>`.",62,{"inputs":[{"name":"seqdeserializer"},{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"visit","","",62,{"inputs":[{"name":"seqdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",62,{"inputs":[{"name":"seqdeserializer"}],"output":{"name":"result"}}],[11,"end","","",62,{"inputs":[{"name":"seqdeserializer"}],"output":{"name":"result"}}],[11,"size_hint","","",62,null],[11,"into_deserializer","collections::vec","",18,{"inputs":[{"name":"vec"}],"output":{"name":"seqdeserializer"}}],[11,"into_deserializer","collections::btree::set","",12,{"inputs":[{"name":"btreeset"}],"output":{"name":"seqdeserializer"}}],[11,"into_deserializer","std::collections::hash::set","",16,{"inputs":[{"name":"hashset"}],"output":{"name":"seqdeserializer"}}],[11,"new","serde::de::value","Construct a new `MapDeserializer<I, K, V>`.",63,{"inputs":[{"name":"mapdeserializer"},{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"visit","","",63,{"inputs":[{"name":"mapdeserializer"},{"name":"v_"}],"output":{"name":"result"}}],[11,"visit_key","","",63,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"visit_value","","",63,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"end","","",63,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"size_hint","","",63,null],[11,"into_deserializer","collections::btree::map","",34,{"inputs":[{"name":"btreemap"}],"output":{"name":"mapdeserializer"}}],[11,"into_deserializer","std::collections::hash::map","",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"mapdeserializer"}}],[11,"into_deserializer","serde::bytes","",0,{"inputs":[{"name":"bytes"}],"output":{"name":"bytesdeserializer"}}],[11,"visit","serde::de::value","",64,{"inputs":[{"name":"bytesdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"deserializer"}}],[11,"visit","serde::de::value","",65,{"inputs":[{"name":"bytebufdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a\n`Deserializer` error.",null,null],[10,"syntax","","Raised when there is general error when deserializing a type.",66,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[11,"length_mismatch","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",66,{"inputs":[{"name":"error"},{"name":"usize"}],"output":{"name":"self"}}],[11,"type_mismatch","","Raised when a `Deserialize` was passed an incorrect type.",66,{"inputs":[{"name":"error"},{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",66,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",66,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[10,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",66,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[10,"missing_field","","Raised when a `Deserialize` struct type did not receive a field.",66,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",67,{"inputs":[{"name":"deserialize"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\nvalue. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",68,null],[10,"visit","","This method walks a visitor through a value as it is being deserialized.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_char","","This method hints that the `Deserialize` type is expecting a `char` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_str","","This method hints that the `Deserialize` type is expecting a `&str` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_string","","This method hints that the `Deserialize` type is expecting a `String` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows\ndeserializers that encode an optional value as a nullable value to convert the null value\ninto a `None`, and a regular value as `Some(value)`.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows\ndeserializers to parse sequences that aren't tagged as sequences.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows\ndeserializers to parse sequences that aren't tagged as maps.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows\ndeserializers to a unit struct that aren't tagged as a unit struct.",68,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows\ndeserializers to a newtype struct that aren't tagged as a newtype struct.",68,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows\ndeserializers to parse sequences that aren't tagged as sequences.",68,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows\ndeserializers to parse sequences that aren't tagged as maps.",68,null],[11,"visit_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows\ndeserializers that provide a custom tuple serialization to properly deserialize the type.",68,{"inputs":[{"name":"deserializer"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows\ndeserializers that provide a custom enumeration serialization to properly deserialize the\ntype.",68,null],[11,"visit_bytes","","This method hints that the `Deserialize` type is expecting a `Vec<u8>`. This allows\ndeserializers that provide a custom byte vector serialization to properly deserialize the\ntype.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"format","","Specify a format string for the deserializer.",68,{"inputs":[{"name":"deserializer"}],"output":{"name":"str"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",69,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","`visit_str` deserializes a `&str` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",69,{"inputs":[{"name":"visitor"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",69,{"inputs":[{"name":"visitor"}],"output":{"name":"result"}}],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","`visit_bool` deserializes a `SeqVisitor` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","`visit_bytes` deserializes a `&[u8]` into a `Value`.",69,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec<u8>` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"vec"}],"output":{"name":"result"}}],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",70,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\nare no more remaining items.",70,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"result"}}],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",70,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",70,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",71,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n`Ok(None)` if there are no more remaining items.",71,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\nmore remaining items.",71,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",71,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",71,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",71,null],[11,"missing_field","","Report that there",71,{"inputs":[{"name":"mapvisitor"},{"name":"str"}],"output":{"name":"result"}}],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n`Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",72,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",72,{"inputs":[{"name":"enumvisitor"},{"name":"v"}],"output":{"name":"result"}}],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n`Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",73,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",73,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",73,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value. By default this\nuses the `visit_tuple` method to deserialize the value.",73,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.",73,{"inputs":[{"name":"variantvisitor"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.",73,null],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position's line and column.",null,null],[11,"new","","Construct a new `LineColIterator<Iter>`.",74,{"inputs":[{"name":"linecoliterator"},{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"usize"}}],[11,"col","","Report the current column inside the iterator.",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"usize"}}],[11,"get_ref","","Gets a reference to the underlying iterator.",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"peek","","peeks at the next value",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"option"}}],[11,"next","","",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"option"}}],[0,"ser","serde","Generic serialization framework.",null,null],[0,"impls","serde::ser","Implementations for all of Rust's builtin types.",null,null],[3,"SeqIteratorVisitor","serde::ser::impls","A `serde::Visitor` for sequence iterators.",null,null],[3,"TupleVisitor1","","A tuple visitor.",null,null],[3,"TupleVisitor2","","A tuple visitor.",null,null],[3,"TupleVisitor3","","A tuple visitor.",null,null],[3,"TupleVisitor4","","A tuple visitor.",null,null],[3,"TupleVisitor5","","A tuple visitor.",null,null],[3,"TupleVisitor6","","A tuple visitor.",null,null],[3,"TupleVisitor7","","A tuple visitor.",null,null],[3,"TupleVisitor8","","A tuple visitor.",null,null],[3,"TupleVisitor9","","A tuple visitor.",null,null],[3,"TupleVisitor10","","A tuple visitor.",null,null],[3,"TupleVisitor11","","A tuple visitor.",null,null],[3,"TupleVisitor12","","A tuple visitor.",null,null],[3,"MapIteratorVisitor","","A `serde::Visitor` for (key, value) map iterators.",null,null],[11,"serialize","collections::string","",7,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","core::option","",8,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit","","",8,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",8,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"new","serde::ser::impls","Construct a new `SeqIteratorVisitor<Iter>`.",75,{"inputs":[{"name":"seqiteratorvisitor"},{"name":"iter"},{"name":"option"}],"output":{"name":"seqiteratorvisitor"}}],[11,"visit","","",75,{"inputs":[{"name":"seqiteratorvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",75,{"inputs":[{"name":"seqiteratorvisitor"}],"output":{"name":"option"}}],[11,"serialize","collections::binary_heap","",10,{"inputs":[{"name":"binaryheap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::btree::set","",12,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::collections::hash::set","",16,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::linked_list","",14,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::vec","",18,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::vec_deque","",20,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","serde::ser::impls","Construct a new, empty `TupleVisitor`.",76,null],[11,"visit","","",76,{"inputs":[{"name":"tuplevisitor1"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",76,{"inputs":[{"name":"tuplevisitor1"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",77,null],[11,"visit","","",77,{"inputs":[{"name":"tuplevisitor2"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",77,{"inputs":[{"name":"tuplevisitor2"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",78,null],[11,"visit","","",78,{"inputs":[{"name":"tuplevisitor3"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",78,{"inputs":[{"name":"tuplevisitor3"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",79,null],[11,"visit","","",79,{"inputs":[{"name":"tuplevisitor4"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",79,{"inputs":[{"name":"tuplevisitor4"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",80,null],[11,"visit","","",80,{"inputs":[{"name":"tuplevisitor5"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",80,{"inputs":[{"name":"tuplevisitor5"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",81,null],[11,"visit","","",81,{"inputs":[{"name":"tuplevisitor6"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",81,{"inputs":[{"name":"tuplevisitor6"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",82,null],[11,"visit","","",82,{"inputs":[{"name":"tuplevisitor7"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",82,{"inputs":[{"name":"tuplevisitor7"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",83,null],[11,"visit","","",83,{"inputs":[{"name":"tuplevisitor8"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",83,{"inputs":[{"name":"tuplevisitor8"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",84,null],[11,"visit","","",84,{"inputs":[{"name":"tuplevisitor9"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",84,{"inputs":[{"name":"tuplevisitor9"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",85,null],[11,"visit","","",85,{"inputs":[{"name":"tuplevisitor10"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",85,{"inputs":[{"name":"tuplevisitor10"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",86,null],[11,"visit","","",86,{"inputs":[{"name":"tuplevisitor11"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",86,{"inputs":[{"name":"tuplevisitor11"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",87,null],[11,"visit","","",87,{"inputs":[{"name":"tuplevisitor12"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",87,{"inputs":[{"name":"tuplevisitor12"}],"output":{"name":"option"}}],[11,"new","","Construct a new `MapIteratorVisitor<Iter>`.",88,{"inputs":[{"name":"mapiteratorvisitor"},{"name":"iter"},{"name":"option"}],"output":{"name":"mapiteratorvisitor"}}],[11,"visit","","",88,{"inputs":[{"name":"mapiteratorvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",88,{"inputs":[{"name":"mapiteratorvisitor"}],"output":{"name":"option"}}],[11,"serialize","collections::btree::map","",34,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::collections::hash::map","",36,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::boxed","",38,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::rc","",40,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::arc","",39,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::borrow","",41,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","core::result","",42,{"inputs":[{"name":"result"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::path","",89,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",37,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serialize","serde::ser","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",90,{"inputs":[{"name":"serialize"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",91,null],[10,"visit_bool","","`visit_bool` serializes a `bool` value.",91,{"inputs":[{"name":"serializer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_isize","","`visit_isize` serializes a `isize` value. By default it casts the value to a `i64` and\npasses it to the `visit_i64` method.",91,{"inputs":[{"name":"serializer"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","`visit_i8` serializes a `i8` value. By default it casts the value to a `i64` and\npasses it to the `visit_i64` method.",91,{"inputs":[{"name":"serializer"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","`visit_i16` serializes a `i16` value. By default it casts the value to a `i64` and\npasses it to the `visit_i64` method.",91,{"inputs":[{"name":"serializer"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","`visit_i32` serializes a `i32` value. By default it casts the value to a `i64` and\npasses it to the `visit_i64` method.",91,{"inputs":[{"name":"serializer"},{"name":"i32"}],"output":{"name":"result"}}],[10,"visit_i64","","`visit_i64` serializes a `i64` value.",91,{"inputs":[{"name":"serializer"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","`visit_usize` serializes a `usize` value. By default it casts the value to a `u64` and\npasses it to the `visit_u64` method.",91,{"inputs":[{"name":"serializer"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","`visit_u8` serializes a `u8` value. By default it casts the value to a `u64` and passes\nit to the `visit_u64` method.",91,{"inputs":[{"name":"serializer"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","`visit_u32` serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `visit_u64` method.",91,{"inputs":[{"name":"serializer"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","`visit_u32` serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `visit_u64` method.",91,{"inputs":[{"name":"serializer"},{"name":"u32"}],"output":{"name":"result"}}],[10,"visit_u64","","`visit_u64` serializes a `u64` value.",91,{"inputs":[{"name":"serializer"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","`visit_f32` serializes a `f32` value. By default it casts the value to a `f64` and passes\nit to the `visit_f64` method.",91,{"inputs":[{"name":"serializer"},{"name":"f32"}],"output":{"name":"result"}}],[10,"visit_f64","","`visit_f64` serializes a `f64` value.",91,{"inputs":[{"name":"serializer"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","`visit_char` serializes a character. By default it serializes it as a `&str` containing a\nsingle character.",91,{"inputs":[{"name":"serializer"},{"name":"char"}],"output":{"name":"result"}}],[10,"visit_str","","`visit_str` serializes a `&str`.",91,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_bytes","","`visit_bytes` is a hook that enables those serialization formats that support serializing\nbyte slices separately from generic arrays. By default it serializes as a regular array.",91,null],[10,"visit_unit","","Serializes a `()` value.",91,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","Serializes a unit struct value.",91,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_unit_variant","","Serializes a unit variant, otherwise known as a variant with no arguments.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The `visit_newtype_struct` allows a tuple struct with a single element, also known as a\nnewtyped value, to be more efficiently serialized than a tuple struct with multiple items.\nBy default it just serializes the value as a tuple struct sequence.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_newtype_variant","","The `visit_newtype_variant` allows a variant with a single item to be more efficiently\nserialized than a variant with multiple items. By default it just serializes the value as a\ntuple variant sequence.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"visit_none","","Serializes a `None` value.",91,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[10,"visit_some","","Serializes a `Some(...)` value.",91,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"visit_seq","","Serializes a sequence.",91,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"visit_seq_elt","","Serializes a sequence element.",91,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_tuple","","Serializes a tuple.",91,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_tuple_elt","","Serializes a tuple element.",91,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_tuple_struct","","Serializes a tuple struct.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_tuple_struct_elt","","Serializes a tuple struct element.",91,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_tuple_variant","","Serializes a tuple variant.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_tuple_variant_elt","","Serializes a tuple element.",91,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[10,"visit_map","","Serializes a map.",91,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"visit_map_elt","","Serializes a map element (key-value pair).",91,{"inputs":[{"name":"serializer"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","Serializes a struct.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct_elt","","Serializes an element of a struct.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct_variant","","Serializes a struct variant.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct_variant_elt","","Serializes an element of a struct variant.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"format","","Specify a format string for the serializer.",91,{"inputs":[{"name":"serializer"}],"output":{"name":"str"}}],[8,"SeqVisitor","","A trait that is used by a `Serialize` to iterate through a sequence.",null,null],[10,"visit","","Serializes a sequence item in the serializer.",92,{"inputs":[{"name":"seqvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","Return the length of the sequence if known.",92,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"option"}}],[8,"MapVisitor","","A trait that is used by a `Serialize` to iterate through a map.",null,null],[10,"visit","","Serializes a map item in the serializer.",93,{"inputs":[{"name":"mapvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","Return the length of the map if known.",93,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"option"}}]],"paths":[[3,"Bytes"],[3,"ByteBuf"],[3,"ByteBufVisitor"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PrimitiveVisitor"],[3,"String"],[4,"Option"],[3,"BinaryHeapVisitor"],[3,"BinaryHeap"],[3,"BTreeSetVisitor"],[3,"BTreeSet"],[3,"LinkedListVisitor"],[3,"LinkedList"],[3,"HashSetVisitor"],[3,"HashSet"],[3,"VecVisitor"],[3,"Vec"],[3,"VecDequeVisitor"],[3,"VecDeque"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"BTreeMapVisitor"],[3,"BTreeMap"],[3,"HashMapVisitor"],[3,"HashMap"],[3,"PathBuf"],[3,"Box"],[3,"Arc"],[3,"Rc"],[4,"Cow"],[4,"Result"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"SeqDeserializer"],[3,"MapDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[3,"SeqIteratorVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"MapIteratorVisitor"],[3,"Path"],[8,"Serialize"],[8,"Serializer"],[8,"SeqVisitor"],[8,"MapVisitor"]]};
searchIndex['num'] = {"items":[[0,"","num","A collection of numeric types and traits for Rust.",null,null],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[0,"complex","","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",2,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",4,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",5,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",6,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",7,null],[13,"Invalid","","",7,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",8,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",8,{"inputs":[{"name":"num"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",9,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",9,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",10,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",11,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",11,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",11,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",11,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",11,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",12,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",12,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",13,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",13,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",14,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",15,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",16,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",17,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",18,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",18,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",18,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",18,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",18,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",18,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",18,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",18,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",18,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",21,{"inputs":[{"name":"numcast"},{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",22,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",22,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",22,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",22,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",22,null]],"paths":[[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"]]};
initSearch(searchIndex);
